package main

import (
	"bytes"
	"flag"
	"github.com/dave/jennifer/jen"
	"github.com/knq/snaker"
	"github.com/pkg/errors"
	"github.com/reddec/symbols"
	"io/ioutil"
)

var tpName = flag.String("type", "", "Type name to wrap")
var pkName = flag.String("package", "", "Output package (default: same as in input file)")
var ouName = flag.String("out", "", "Output file (default: <type name>_storage.go)")

func main() {
	flag.Parse()
	if *tpName == "" {
		panic("type name should be specified")
	}

	if *ouName == "" {
		*ouName = snaker.CamelToSnake(*tpName) + "_storage.go"
	}

	f, err := generate(".", *tpName, *pkName)
	if err != nil {
		panic(err)
	}
	data := &bytes.Buffer{}
	err = f.Render(data)
	if err != nil {
		panic(err)
	}
	err = ioutil.WriteFile(*ouName, data.Bytes(), 0755)
	if err != nil {
		panic(err)
	}
}

func generate(dirName, typeName string, pkgName string) (*jen.File, error) {
	project, err := symbols.ProjectByDir(dirName)
	if err != nil {
		return nil, err
	}
	var file *jen.File
	if pkgName == "" {
		pkgName = project.Package.Package
		file = jen.NewFilePathName(project.Package.Import, pkgName)
	} else {
		file = jen.NewFile(pkgName)
	}

	sym := project.Package.FindSymbol(typeName)
	if sym == nil {
		return nil, errors.Errorf("symbol %v is not found", typeName)
	}

	file.HeaderComment("Code generated by typedstorage -type " + typeName + ". DO NOT EDIT.")
	symQual := jen.Qual(sym.Import.Import, typeName)
	stName := sym.Name + "Storage"
	file.Comment("Typed storage for " + typeName)
	file.Type().Id(stName).StructFunc(func(struc *jen.Group) {
		struc.Id("cold").Qual("github.com/reddec/storages", "Storage").Comment("persist storage")
	})

	file.Line()
	file.Comment("Creates new storage for " + typeName)
	file.Func().Id("New" + stName).Params(jen.Id("cold").Qual("github.com/reddec/storages", "Storage")).Op("*").Id(stName).BlockFunc(func(fn *jen.Group) {
		fn.Return(jen.Op("&").Id(stName).Values(jen.Id("cold").Op(":").Id("cold")))
	})

	file.Line()
	file.Comment("Put single " + typeName + " encoded in JSON into storage")
	file.Func().Parens(jen.Id("cs").Op("*").Id(stName)).Id("Put").Params(jen.Id("key").String(), jen.Id("item").Op("*").Add(symQual)).Params(jen.Error()).BlockFunc(func(fn *jen.Group) {
		fn.List(jen.Id("data"), jen.Err()).Op(":=").Qual("encoding/json", "Marshal").Call(jen.Id("item"))
		fn.If(jen.Err().Op("!=").Nil()).BlockFunc(func(group *jen.Group) {
			group.Return(jen.Err())
		})
		fn.Err().Op("=").Id("cs").Dot("cold").Dot("Put").Call(jen.Index().Byte().Parens(jen.Id("key")), jen.Id("data"))
		fn.Return(jen.Err())
	})

	file.Line()
	file.Comment("Get single " + typeName + " from storage and decode data as JSON")
	file.Func().Parens(jen.Id("cs").Op("*").Id(stName)).Id("Get").Params(jen.Id("key").String()).Parens(jen.List(jen.Op("*").Add(symQual), jen.Error())).BlockFunc(func(fn *jen.Group) {
		fn.List(jen.Id("data"), jen.Err()).Op(":=").Id("cs").Dot("cold").Dot("Get").Call(jen.Index().Byte().Parens(jen.Id("key")))
		fn.If(jen.Err().Op("!=").Nil()).BlockFunc(func(group *jen.Group) {
			group.Return(jen.Nil(), jen.Err())
		})
		fn.Var().Id("item").Add(symQual)
		fn.Err().Op("=").Qual("encoding/json", "Unmarshal").Call(jen.Id("data"), jen.Op("&").Id("item"))
		fn.If(jen.Err().Op("!=").Nil()).BlockFunc(func(group *jen.Group) {
			group.Return(jen.Nil(), jen.Err())
		})
		fn.Return(jen.Op("&").Id("item"), jen.Nil())
	})

	file.Line()
	file.Comment("Del key from hot and cold storage")
	file.Func().Parens(jen.Id("cs").Op("*").Id(stName)).Id("Del").Params(jen.Id("key").String()).Error().BlockFunc(func(fn *jen.Group) {
		fn.Err().Op(":=").Id("cs").Dot("cold").Dot("Del").Call(jen.Index().Byte().Parens(jen.Id("key")))
		fn.Return(jen.Err())
	})

	file.Line()
	file.Comment("Keys copied slice that cached in hot storage")
	file.Func().Parens(jen.Id("cs").Op("*").Id(stName)).Id("Keys").Params().Parens(jen.List(jen.Index().String(), jen.Error())).BlockFunc(func(fn *jen.Group) {
		fn.Var().Id("ans").Index().String()
		fn.Return(jen.Id("ans"), jen.Id("cs").Dot("cold").Dot("Keys").Call(jen.Func().Params(jen.Id("key").Index().Byte()).Error().BlockFunc(func(group *jen.Group) {
			group.Id("ans").Op("=").Append(jen.Id("ans"), jen.String().Parens(jen.Id("key")))
			group.Return(jen.Nil())
		})))
	})

	return file, nil
}
