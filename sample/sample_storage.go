// Code generated by typedstorage -type Sample. DO NOT EDIT.

package sample

import (
	"encoding/json"
	storages "github.com/reddec/storages"
)

// Typed storage for Sample
type SampleStorage struct {
	cold storages.Storage // persist storage
}

// Creates new storage for Sample
func NewSampleStorage(cold storages.Storage) *SampleStorage {
	return &SampleStorage{cold: cold}
}

// Put single Sample encoded in JSON into storage
func (cs *SampleStorage) Put(key string, item *Sample) error {
	data, err := json.Marshal(item)
	if err != nil {
		return err
	}
	err = cs.cold.Put([]byte(key), data)
	return err
}

// Get single Sample from storage and decode data as JSON
func (cs *SampleStorage) Get(key string) (*Sample, error) {
	data, err := cs.cold.Get([]byte(key))
	if err != nil {
		return nil, err
	}
	var item Sample
	err = json.Unmarshal(data, &item)
	if err != nil {
		return nil, err
	}
	return &item, nil
}

// Del key from hot and cold storage
func (cs *SampleStorage) Del(key string) error {
	err := cs.cold.Del([]byte(key))
	return err
}

// Keys copied slice that cached in hot storage
func (cs *SampleStorage) Keys() ([]string, error) {
	var ans []string
	return ans, cs.cold.Keys(func(key []byte) error {
		ans = append(ans, string(key))
		return nil
	})
}
